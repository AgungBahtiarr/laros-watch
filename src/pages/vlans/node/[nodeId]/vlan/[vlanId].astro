---
import Layout from "../../../../layouts/Layout.astro";

// Define types based on API
interface VlanSummary {
    nodeId: number;
    vlanId: number;
    node: {
        id: number;
        name: string;
        ipMgmt: string;
        os: string;
    };
    name: string;
    description: string | null;
    tagged: InterfaceInfo[];
    untagged: InterfaceInfo[];
    totalInterfaces: number;
}

interface InterfaceInfo {
    id: number;
    ifName: string;
    ifDescr: string;
}

export const prerender = false;

const { nodeId, vlanId } = Astro.params;
const token = Astro.cookies.get("authToken");
const apiUrl = import.meta.env.PUBLIC_API_BASE_URL;

let vlanSummary: VlanSummary | null = null;
let errorMessage: string | null = null;

try {
    const response = await fetch(`${apiUrl}/api/vlans/node/${nodeId}/vlan/${vlanId}`, {
        headers: {
            Authorization: `Basic ${token?.value}`,
        },
    });
    if (response.ok) {
        const jsonResponse = await response.json();
        vlanSummary = jsonResponse.data;
    } else {
        const errorJson = await response.json();
        errorMessage = errorJson.message || `Failed to fetch VLAN details. Status: ${response.status}`;
    }
} catch (error: any) {
    console.error("Failed to fetch VLAN details:", error);
    errorMessage = error.message || "An unknown error occurred.";
}
---

<Layout title={vlanSummary ? `VLAN ${vlanSummary.vlanId} on ${vlanSummary.node.name}` : "VLAN Not Found"}>
    <main class="container mx-auto p-4 md:p-8">
        {vlanSummary ? (
            <>
                <header class="mb-8">
                    <a href="/vlans" class="btn btn-ghost btn-sm mb-4">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                        </svg>
                        Back to VLANs
                    </a>
                    <h1 class="text-3xl font-bold text-base-content">
                        VLAN {vlanSummary.vlanId}: {vlanSummary.name}
                    </h1>
                    <p class="text-base-content/60">
                        On node <a href={`/nodes/${vlanSummary.node.id}`} class="link">{vlanSummary.node.name}</a>
                    </p>
                    {vlanSummary.description && <p class="text-base-content/80 mt-2">{vlanSummary.description}</p>}
                </header>

                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <!-- Tagged Interfaces -->
                    <div class="card bg-base-100 border border-base-300">
                        <div class="card-body">
                            <h2 class="card-title">Tagged Interfaces ({vlanSummary.tagged.length})</h2>
                            {vlanSummary.tagged.length > 0 ? (
                                <ul class="list-disc list-inside mt-2">
                                    {vlanSummary.tagged.map(iface => (
                                        <li>{iface.ifName} {iface.ifDescr && `(${iface.ifDescr})`}</li>
                                    ))}
                                </ul>
                            ) : (
                                <p class="text-base-content/60 mt-2">No tagged interfaces.</p>
                            )}
                        </div>
                    </div>

                    <!-- Untagged Interfaces -->
                    <div class="card bg-base-100 border border-base-300">
                        <div class="card-body">
                            <h2 class="card-title">Untagged Interfaces ({vlanSummary.untagged.length})</h2>
                            {vlanSummary.untagged.length > 0 ? (
                                <ul class="list-disc list-inside mt-2">
                                    {vlanSummary.untagged.map(iface => (
                                        <li>{iface.ifName} {iface.ifDescr && `(${iface.ifDescr})`}</li>
                                    ))}
                                </ul>
                            ) : (
                                <p class="text-base-content/60 mt-2">No untagged interfaces.</p>
                            )}
                        </div>
                    </div>
                </div>
            </>
        ) : (
            <div class="text-center py-16">
                <h1 class="text-2xl font-bold">VLAN Not Found</h1>
                <p class="text-base-content/60 mt-2">{errorMessage}</p>
                <a href="/vlans" class="btn btn-primary mt-4">
                    Back to VLANs List
                </a>
            </div>
        )}
    </main>
</Layout>
