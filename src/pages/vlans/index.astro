---
import Layout from "../../layouts/Layout.astro";

// Types
interface VlanInterface {
    id: number;
    nodeId: number;
    vlanId: number;
    interfaceId: number;
    isTagged: boolean;
    name: string;
    description: string | null;
    node: {
        id: number;
        name: string;
        ipMgmt: string;
        os: string;
    };
    interface: {
        id: number;
        ifName: string;
        ifDescr: string;
    };
}

interface VlanSummaryInGroup {
    vlanId: number;
    name: string;
    tagged: VlanInterface["interface"][];
    untagged: VlanInterface["interface"][];
}

interface VlanGroup {
    node: VlanInterface["node"];
    vlans: VlanInterface[];
    summaries: VlanSummaryInGroup[];
    searchText: string;
}

// Data fetching
let vlanInterfaces: VlanInterface[] = [];
const token = Astro.cookies.get("authToken");
const apiUrl = import.meta.env.PUBLIC_API_BASE_URL;

try {
    const response = await fetch(`${apiUrl}/api/nodes/vlans`, {
        headers: { Authorization: `Basic ${token?.value}` },
    });
    if (response.ok) {
        const jsonResponse = await response.json();
        vlanInterfaces = jsonResponse.data;
    } else {
        console.error(
            "Failed to fetch VLANs:",
            response.status,
            await response.text(),
        );
    }
} catch (error) {
    console.error("Failed to fetch VLANs:", error);
}

// Stats
const totalVlanMemberships = vlanInterfaces.length;
const uniqueVlanIds = new Set(vlanInterfaces.map((v) => v.vlanId)).size;
const uniqueNodeIds = new Set(vlanInterfaces.map((v) => v.nodeId)).size;

// Grouping logic
const vlanGroupsMap = vlanInterfaces.reduce((acc, vlan) => {
    const nodeId = vlan.node.id;
    if (!acc.has(nodeId)) {
        acc.set(nodeId, { node: vlan.node, vlans: [] });
    }
    acc.get(nodeId)!.vlans.push(vlan);
    return acc;
}, new Map<number, { node: VlanInterface["node"]; vlans: VlanInterface[] }>());

const groupedVlans: VlanGroup[] = Array.from(vlanGroupsMap.values()).map(
    (group) => {
        const summaries = Object.values(
            group.vlans.reduce(
                (acc, vlan) => {
                    const vlanId = vlan.vlanId;
                    if (!acc[vlanId]) {
                        acc[vlanId] = {
                            vlanId: vlan.vlanId,
                            name: vlan.name,
                            tagged: [],
                            untagged: [],
                        };
                    }
                    if (vlan.isTagged) {
                        acc[vlanId].tagged.push(vlan.interface);
                    } else {
                        acc[vlanId].untagged.push(vlan.interface);
                    }
                    return acc;
                },
                {} as Record<number, VlanSummaryInGroup>,
            ),
        );

        const searchText = [
            group.node.name.toLowerCase(),
            ...summaries.map((s) => `${s.vlanId} ${s.name.toLowerCase()}`),
        ].join(" ");

        return { ...group, summaries, searchText };
    },
);
---

<Layout title="VLANs by Device">
    <main class="container mx-auto p-4 md:p-8">
        <header class="mb-8">
            <h1 class="text-3xl font-bold text-base-content">
                VLAN Configurations
            </h1>
            <p class="text-base-content/60">
                A list of all VLANs, grouped by network device and VLAN ID.
            </p>
        </header>

        <!-- Stats -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
            <div class="card bg-base-100 border border-base-300">
                <div class="stat p-5">
                    <div class="stat-title">Total VLAN Memberships</div>
                    <div class="stat-value">{totalVlanMemberships}</div>
                </div>
            </div>
            <div class="card bg-base-100 border border-base-300">
                <div class="stat p-5">
                    <div class="stat-title">Unique VLANs</div>
                    <div class="stat-value">{uniqueVlanIds}</div>
                </div>
            </div>
            <div class="card bg-base-100 border border-base-300">
                <div class="stat p-5">
                    <div class="stat-title">Nodes with VLANs</div>
                    <div class="stat-value">{uniqueNodeIds}</div>
                </div>
            </div>
        </div>

        <!-- Search -->
        <div class="form-control w-full mb-6">
            <div class="relative">
                <input
                    type="text"
                    id="searchInput"
                    placeholder="Search by node or VLAN..."
                    class="input input-bordered w-full pr-10"
                />
                <span
                    class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke-width="1.5"
                        stroke="currentColor"
                        class="w-5 h-5 text-base-content/40"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"
                        ></path>
                    </svg>
                </span>
            </div>
        </div>

        <!-- VLAN Groups -->
        <div id="vlan-groups-container" class="space-y-2">
            {
                groupedVlans.length > 0 ? (
                    groupedVlans.map((group) => (
                        <div
                            class="vlan-group collapse collapse-arrow bg-base-200/60 border border-base-300/20"
                            data-search-text={group.searchText}
                        >
                            <input type="checkbox" class="peer" />
                            <div class="collapse-title text-lg font-medium peer-checked:bg-base-300/40">
                                {group.node.name}
                                <span class="badge badge-neutral ml-2">
                                    {group.summaries.length} VLANs
                                </span>
                            </div>
                            <div class="collapse-content bg-base-100 p-0">
                                <div class="p-4 space-y-2">
                                    {group.summaries.map((summary) => (
                                        <div class="collapse collapse-plus bg-base-200/50">
                                            <input type="checkbox" />
                                            <div class="collapse-title font-medium">
                                                VLAN {summary.vlanId}:{" "}
                                                {summary.name}
                                            </div>
                                            <div class="collapse-content bg-base-100 text-sm">
                                                {summary.tagged.length > 0 && (
                                                    <div class="pt-2">
                                                        <p class="font-semibold">
                                                            Tagged:
                                                        </p>
                                                        <div class="flex flex-wrap gap-1 mt-1">
                                                            {summary.tagged.map(
                                                                (iface) => (
                                                                    <span class="badge badge-primary badge-outline">
                                                                        {
                                                                            iface.ifName
                                                                        }
                                                                    </span>
                                                                ),
                                                            )}
                                                        </div>
                                                    </div>
                                                )}
                                                {summary.untagged.length >
                                                    0 && (
                                                    <div class="pt-2">
                                                        <p class="font-semibold">
                                                            Untagged:
                                                        </p>
                                                        <div class="flex flex-wrap gap-1 mt-1">
                                                            {summary.untagged.map(
                                                                (iface) => (
                                                                    <span class="badge badge-ghost badge-outline">
                                                                        {
                                                                            iface.ifName
                                                                        }
                                                                    </span>
                                                                ),
                                                            )}
                                                        </div>
                                                    </div>
                                                )}
                                                {summary.tagged.length === 0 &&
                                                    summary.untagged.length ===
                                                        0 && (
                                                        <p class="text-base-content/60">
                                                            No interfaces
                                                            assigned.
                                                        </p>
                                                    )}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    ))
                ) : (
                    <div class="text-center py-16">
                        <p>No VLANs found or API is unavailable.</p>
                    </div>
                )
            }
        </div>
    </main>
</Layout>

<script>
    function initVlanFilter() {
        const searchInput = document.getElementById("searchInput");
        const container = document.getElementById("vlan-groups-container");
        if (!searchInput || !container) return;
        const groups = container.querySelectorAll(".vlan-group");

        function filterGroups() {
            const searchTerm = searchInput.value.toLowerCase();

            groups.forEach((group) => {
                const searchData = group.dataset.searchText || "";
                const searchMatch = searchData.includes(searchTerm);

                if (searchMatch) {
                    group.style.display = "";
                } else {
                    group.style.display = "none";
                }
            });
        }

        searchInput.addEventListener("input", filterGroups);
    }

    document.addEventListener("astro:page-load", initVlanFilter);
    initVlanFilter();
</script>
