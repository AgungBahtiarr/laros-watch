---
import Layout from "@/layouts/Layout.astro";
import VlanTraceCard from "@/components/VlanTraceCard.astro";
import type { VlanInterface } from "@/types";

interface VlanGroup {
    vlanId: number;
    name: string;
    interfaces: VlanInterface[];
}

interface NodeGroup {
    node: VlanInterface["node"];
    vlanGroups: VlanGroup[];
    searchText: string;
    hasTagged: boolean;
    hasUntagged: boolean;
}

let vlanInterfaces: VlanInterface[] = [];
const token = Astro.cookies.get("authToken");
const apiUrl = import.meta.env.PUBLIC_API_BASE_URL;

try {
    const response = await fetch(`${apiUrl}/api/nodes/vlans`, {
        headers: { Authorization: `Basic ${token?.value}` },
    });
    if (response.ok) {
        vlanInterfaces = (await response.json()).data;
    } else {
        console.error(
            "Failed to fetch VLANs:",
            response.status,
            await response.text(),
        );
    }
} catch (error) {
    console.error("Failed to fetch VLANs:", error);
}

const nodeGroupsMap = vlanInterfaces.reduce((acc, vlan) => {
    const nodeId = vlan.node.id;
    if (!acc.has(nodeId)) {
        acc.set(nodeId, { node: vlan.node, vlanMap: new Map() });
    }
    const nodeGroup = acc.get(nodeId)!;
    const vlanId = vlan.vlanId;
    if (!nodeGroup.vlanMap.has(vlanId)) {
        nodeGroup.vlanMap.set(vlanId, {
            vlanId,
            name: vlan.name,
            interfaces: [],
        });
    }
    nodeGroup.vlanMap.get(vlanId)!.interfaces.push(vlan);
    return acc;
}, new Map<number, { node: VlanInterface["node"]; vlanMap: Map<number, VlanGroup> }>());

const finalNodeGroups: NodeGroup[] = Array.from(nodeGroupsMap.values()).map(
    (group) => {
        const vlanGroups = Array.from(group.vlanMap.values());
        const searchText = [
            group.node.name.toLowerCase(),
            group.node.ipMgmt,
            group.node.os.toLowerCase(),
            ...vlanGroups.flatMap((vg) => [
                String(vg.vlanId),
                vg.name.toLowerCase(),
            ]),
        ].join(" ");
        const hasTagged = vlanGroups.some((vg) =>
            vg.interfaces.some((i) => i.isTagged),
        );
        const hasUntagged = vlanGroups.some((vg) =>
            vg.interfaces.some((i) => !i.isTagged),
        );
        return {
            node: group.node,
            vlanGroups,
            searchText,
            hasTagged,
            hasUntagged,
        };
    },
);

// Fetch VLAN Trace Data
let vlanTraceData: { [key: string]: { path: string[] }[] } = {};
try {
    const response = await fetch(`${apiUrl}/api/vlan-trace`, {
        headers: { Authorization: `Basic ${token?.value}` },
    });
    if (response.ok) {
        vlanTraceData = await response.json();
    } else {
        console.error(
            "Failed to fetch VLAN traces:",
            response.status,
            await response.text(),
        );
    }
} catch (error) {
    console.error("Failed to fetch VLAN traces:", error);
}

const vlanTraces = Object.entries(vlanTraceData);
---

<Layout title="VLAN Nodes">
    <main class="container mx-auto p-4 md:p-8">
        <header class="mb-8">
            <h1 class="text-3xl font-bold text-base-content">
                Nodes with VLANs
            </h1>
            <p class="text-base-content/60">
                A list of all nodes with VLAN configurations.
            </p>
        </header>

        <!-- Search, Filter, and Actions -->
        <div
            class="flex flex-col md:flex-row justify-between items-center gap-4 mb-6"
        >
            <div class="form-control w-full md:w-auto md:flex-grow">
                <div class="relative">
                    <input
                        type="text"
                        id="searchInput"
                        placeholder="Search by Node, IP, OS, or VLAN..."
                        class="input input-bordered w-full pr-10"
                    />
                    <span
                        class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none"
                    >
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke-width="1.5"
                            stroke="currentColor"
                            class="w-5 h-5 text-base-content/40"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"
                            ></path>
                        </svg>
                    </span>
                </div>
            </div>
            <div class="flex items-center gap-4">
                <div class="form-control w-full md:w-auto">
                    <select id="tagFilter" class="select select-bordered">
                        <option value="all">All Modes</option>
                        <option value="tagged">Has Tagged</option>
                        <option value="untagged">Has Untagged</option>
                    </select>
                </div>
                <button id="sync-vlans-btn" class="btn btn-secondary">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-5 w-5"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                    >
                        <path
                            fill-rule="evenodd"
                            d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 110 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z"
                            clip-rule="evenodd"></path>
                    </svg>
                    Sync VLANs
                </button>
            </div>
        </div>

        <!-- Node Cards Grid -->
        <div
            id="node-cards-container"
            class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"
        >
            {
                finalNodeGroups.length > 0 ? (
                    finalNodeGroups.map((nodeGroup) => (
                        <div
                            class="card bg-base-100 shadow-lg border border-base-300/50 node-card flex flex-col"
                            data-search-text={nodeGroup.searchText}
                            data-has-tagged={nodeGroup.hasTagged}
                            data-has-untagged={nodeGroup.hasUntagged}
                        >
                            <div class="card-body flex-grow">
                                <h2 class="card-title text-lg font-bold">
                                    {nodeGroup.node.name}
                                </h2>
                                <p class="text-sm text-base-content/70">
                                    {nodeGroup.node.ipMgmt}
                                </p>

                                <div class="flex items-center gap-2 mt-4">
                                    <span class="badge badge-outline text-xs">
                                        {nodeGroup.node.os}
                                    </span>
                                    <span class="badge badge-neutral text-xs">
                                        {nodeGroup.vlanGroups.length} VLANs
                                    </span>
                                </div>
                            </div>
                            <div class="card-body pt-0">
                                <div class="divider mt-0 mb-4" />
                                <div class="card-actions justify-end">
                                    <a
                                        href={`/vlans/${nodeGroup.node.id}`}
                                        class="btn btn-primary btn-block"
                                    >
                                        Details
                                    </a>
                                </div>
                            </div>
                        </div>
                    ))
                ) : (
                    <div class="col-span-full text-center py-16 bg-base-200 rounded-lg">
                        <p>No nodes with VLANs found.</p>
                    </div>
                )
            }
        </div>

        <!-- VLAN Path Traces -->
        <header class="my-8 pt-4 border-t border-base-300/50">
            <h2 class="text-2xl font-bold text-base-content">
                VLAN Path Traces
            </h2>
            <p class="text-base-content/60">
                Showing the paths of tagged VLANs starting from the core switch.
            </p>
        </header>

        <div
            id="vlan-trace-cards-container"
            class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"
        >
            {
                vlanTraces.length > 0 ? (
                    vlanTraces.map(([vlanKey, paths]) => (
                        <VlanTraceCard vlanKey={vlanKey} paths={paths} />
                    ))
                ) : (
                    <div class="col-span-full text-center py-16 bg-base-200 rounded-lg">
                        <p>No VLAN trace data found or API is unreachable.</p>
                    </div>
                )
            }
        </div>
    </main>
</Layout>

<script define:vars={{ token: token?.value, apiUrl }}>
    // Filtering Script (remains the same)
    function initVlanFilters() {
        const searchInput = document.getElementById("searchInput");
        const tagFilter = document.getElementById("tagFilter");
        const container = document.getElementById("node-cards-container");
        if (!searchInput || !tagFilter || !container) return;

        const cards = container.querySelectorAll(".node-card");

        function filterAndSearch() {
            const searchTerm = searchInput.value.toLowerCase();
            const tagStatus = tagFilter.value;

            cards.forEach((card) => {
                const searchText = card.dataset.searchText || "";
                const hasTagged = card.dataset.hasTagged === "true";
                const hasUntagged = card.dataset.hasUntagged === "true";

                const searchMatch = searchText.includes(searchTerm);

                let tagMatch = false;
                if (tagStatus === "all") {
                    tagMatch = true;
                } else if (tagStatus === "tagged") {
                    tagMatch = hasTagged;
                } else if (tagStatus === "untagged") {
                    tagMatch = hasUntagged;
                }

                if (searchMatch && tagMatch) {
                    card.style.display = "flex";
                } else {
                    card.style.display = "none";
                }
            });
        }

        searchInput.addEventListener("input", filterAndSearch);
        tagFilter.addEventListener("change", filterAndSearch);
    }

    // Sync Script
    function initSyncButton() {
        const syncButton = document.getElementById("sync-vlans-btn");
        if (!syncButton) return;

        syncButton.addEventListener("click", async () => {
            const originalText = syncButton.innerHTML;
            syncButton.disabled = true;
            syncButton.innerHTML = `<span class="loading loading-spinner loading-xs"></span> Syncing...`;

            try {
                const response = await fetch(`${apiUrl}/api/nodes/vlans`, {
                    method: "POST",
                    headers: {
                        Authorization: `Basic ${token}`,
                    },
                });

                const result = await response.json();

                if (response.ok) {
                    alert(
                        `Sync successful! Synced ${result.syncedCount} VLAN interfaces.`,
                    );
                    location.reload();
                } else {
                    throw new Error(result.message || "Sync failed");
                }
            } catch (error) {
                console.error("Sync error:", error);
                alert(`An error occurred during sync: ${error.message}`);
            } finally {
                syncButton.disabled = false;
                syncButton.innerHTML = originalText;
            }
        });
    }

    document.addEventListener("astro:page-load", () => {
        initVlanFilters();
        initSyncButton();
    });
    initVlanFilters();
    initSyncButton();
</script>
