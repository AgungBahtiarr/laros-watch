---
import Layout from "../../layouts/Layout.astro";

export const prerender = false; // Set page to be server-rendered

// Define types as before
interface Interface {
    id: number;
    nodeId: number;
    ifIndex: number;
    ifName: string;
    ifDescr: string;
    ifType: string;
    ifPhysAddress: string;
    ifOperStatus: number;
    opticalTx: string | null;
    opticalRx: string | null;
    sfpInfo: any | null;
    lastChange: string;
    createdAt: string;
    updatedAt: string;
}

interface Node {
    id: number;
    deviceId: number;
    name: string;
    popLocation: string;
    lat: string;
    lng: string;
    ipMgmt: string;
    snmpCommunity: string;
    status: boolean;
    os: string;
    cpuUsage: number;
    ramUsage: number;
    createdAt: string;
    updatedAt: string;
    interfaces: Interface[];
}

const { id } = Astro.params;
let node: Node | null = null;
try {
    // In SSR mode, this fetch runs on every request.
    // A more optimal API would be `/api/nodes/${id}`
    const response = await fetch(`http://localhost:3000/api/nodes`);
    if (response.ok) {
        const nodes: Node[] = await response.json();
        node = nodes.find((n) => n.id.toString() === id) || null;
    }
} catch (error) {
    console.error("Failed to fetch node details:", error);
}
---

<Layout title={node ? `Node Details: ${node.name}` : "Node Not Found"}>
    <main class="container mx-auto p-4">
        {
            node ? (
                <>
                    <div class="prose mb-8">
                        <h1>{node.name}</h1>
                        <p>Details for device node.</p>
                    </div>

                    <div class="card bg-base-100 border border-base-200 mb-8">
                        <div class="card-body">
                            <h2 class="card-title">Node Information</h2>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <p>
                                    <strong>ID:</strong> {node.id}
                                </p>
                                <p>
                                    <strong>Device ID:</strong> {node.deviceId}
                                </p>
                                <p>
                                    <strong>POP Location:</strong>{" "}
                                    {node.popLocation}
                                </p>
                                <p>
                                    <strong>IP Management:</strong>{" "}
                                    {node.ipMgmt}
                                </p>
                                <p>
                                    <strong>Operating System:</strong> {node.os}
                                </p>
                                <p>
                                    <strong>Status:</strong>
                                    <span
                                        id={`node-status-badge-${node.id}`}
                                        class={`badge ${node.status ? "badge-success" : "badge-error"}`}
                                    >
                                        {node.status ? "Online" : "Offline"}
                                    </span>
                                </p>
                                <p>
                                    <strong>CPU Usage:</strong>{" "}
                                    <span id={`node-cpu-text-${node.id}`}>
                                        {node.cpuUsage}%
                                    </span>
                                </p>
                                <p>
                                    <strong>RAM Usage:</strong>{" "}
                                    <span id={`node-ram-text-${node.id}`}>
                                        {node.ramUsage}%
                                    </span>
                                </p>
                                <p>
                                    <strong>Coordinates:</strong> {node.lat},{" "}
                                    {node.lng}
                                </p>
                                <p>
                                    <strong>Created At:</strong>{" "}
                                    {new Date(node.createdAt).toLocaleString()}
                                </p>
                                <p>
                                    <strong>Last Updated:</strong>{" "}
                                    {new Date(node.updatedAt).toLocaleString()}
                                </p>
                            </div>
                        </div>
                    </div>

                    <div class="prose mb-8">
                        <h2>Interfaces</h2>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="table table-zebra w-full">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Type</th>
                                    <th>MAC Address</th>
                                    <th>Status</th>
                                    <th>Optical Tx/Rx</th>
                                </tr>
                            </thead>
                            <tbody>
                                {node.interfaces.map((iface) => (
                                    <tr id={`interface-row-${iface.id}`}>
                                        <td>{iface.ifName}</td>
                                        <td>{iface.ifDescr}</td>
                                        <td>{iface.ifType}</td>
                                        <td>{iface.ifPhysAddress}</td>
                                        <td>
                                            <span
                                                id={`interface-status-badge-${iface.id}`}
                                                class={`badge ${iface.ifOperStatus === 1 ? "badge-success" : "badge-warning"}`}
                                            >
                                                {iface.ifOperStatus === 1
                                                    ? "Up"
                                                    : "Down"}
                                            </span>
                                        </td>
                                        <td>
                                            {iface.opticalTx && iface.opticalRx
                                                ? `${iface.opticalTx} / ${iface.opticalRx}`
                                                : "N/A"}
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </>
            ) : (
                <div class="text-center">
                    <h1 class="text-2xl">Node not found</h1>
                    <a href="/nodes" class="btn btn-primary mt-4">
                        Back to Nodes List
                    </a>
                </div>
            )
        }
    </main>
    <script define:vars={{ nodeId: node?.id }}>
        let eventSource;

        function initSSE() {
            if (!nodeId) return;

            if (
                eventSource &&
                (eventSource.readyState === 0 || eventSource.readyState === 1)
            ) {
                return;
            }
            if (eventSource) {
                eventSource.close();
            }

            console.log("Initializing SSE on detail page...");
            try {
                eventSource = new EventSource(
                    "http://localhost:3000/api/nodes/status/events",
                );

                eventSource.onopen = () => {
                    console.log("SSE Connection Opened on detail page!");
                };

                const updateNodeUI = (nodeData) => {
                    const statusBadge = document.getElementById(
                        `node-status-badge-${nodeData.id}`,
                    );
                    const cpuText = document.getElementById(
                        `node-cpu-text-${nodeData.id}`,
                    );
                    const ramText = document.getElementById(
                        `node-ram-text-${nodeData.id}`,
                    );

                    if (statusBadge) {
                        statusBadge.textContent = nodeData.status
                            ? "Online"
                            : "Offline";
                        statusBadge.className = `badge ${nodeData.status ? "badge-success" : "badge-error"}`;
                    }
                    if (cpuText) cpuText.textContent = `${nodeData.cpuUsage}%`;
                    if (ramText) ramText.textContent = `${nodeData.ramUsage}%`;
                };

                const updateInterfaceUI = (ifaceData) => {
                    const statusBadge = document.getElementById(
                        `interface-status-badge-${ifaceData.id}`,
                    );
                    if (statusBadge) {
                        statusBadge.textContent =
                            ifaceData.ifOperStatus === 1 ? "Up" : "Down";
                        statusBadge.className = `badge ${ifaceData.ifOperStatus === 1 ? "badge-success" : "badge-warning"}`;
                    }
                };

                eventSource.addEventListener("notification", (event) => {
                    try {
                        const eventData = JSON.parse(event.data);

                        if (
                            eventData.nodeChanges &&
                            Array.isArray(eventData.nodeChanges)
                        ) {
                            const relevantChange = eventData.nodeChanges.find(
                                (n) => n.id === nodeId,
                            );
                            if (relevantChange) {
                                updateNodeUI(relevantChange);
                            }
                        }

                        if (
                            eventData.interfaceChanges &&
                            Array.isArray(eventData.interfaceChanges)
                        ) {
                            eventData.interfaceChanges.forEach((iface) => {
                                if (iface.nodeId === nodeId) {
                                    updateInterfaceUI(iface);
                                }
                            });
                        }
                    } catch (error) {
                        console.error(
                            "Failed to parse SSE data or update UI:",
                            error,
                        );
                    }
                });

                eventSource.onerror = (e) =>
                    console.error("SSE error on detail page", e);
            } catch (e) {
                console.error("Error creating EventSource on detail page:", e);
            }
        }

        document.addEventListener("astro:page-load", initSSE);
        initSSE();
    </script>
</Layout>
