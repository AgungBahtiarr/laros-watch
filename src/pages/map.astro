---
import Layout from "../layouts/Layout.astro";
import MapPage from "../components/MapPage.svelte";
import type { Node, Connection, Odp } from "../types";

const apiBaseUrl =
    import.meta.env.PUBLIC_API_BASE_URL || "http://localhost:3000";
const osrmApiUrl = import.meta.env.PUBLIC_OSRM_API_URL;

// Fetch nodes and connections
const [nodesResponse, connectionsResponse, odpsResponse] = await Promise.all([
    fetch(`${apiBaseUrl}/api/nodes`),
    fetch(`${apiBaseUrl}/api/nodes/connections`),
    fetch(`${apiBaseUrl}/api/nodes/odp`),
]);

const nodes: Node[] = await nodesResponse.json();
const connections: Connection[] = await connectionsResponse.json();
const odps: Odp[] = await odpsResponse.json();

const nodesWithLocation = nodes.filter((node) => node.lat && node.lng);

// Group connections by device pair and select the one with ODP path if available
const connectionGroups = new Map<string, Connection[]>();
connections.forEach((conn) => {
    const pairKey = [conn.deviceAId, conn.deviceBId].sort().join("-");
    if (!connectionGroups.has(pairKey)) {
        connectionGroups.set(pairKey, []);
    }
    connectionGroups.get(pairKey)!.push(conn);
});

const uniqueConnections: Connection[] = [];
for (const group of connectionGroups.values()) {
    const withOdp = group.find(
        (c) => c.odpPath && Array.isArray(c.odpPath) && c.odpPath.length > 0,
    );
    if (withOdp) {
        uniqueConnections.push(withOdp);
    } else if (group.length > 0) {
        uniqueConnections.push(group[0]);
    }
}
---

<Layout title="Nodes Map">
    <MapPage
        client:only="svelte"
        nodes={nodes}
        connections={uniqueConnections}
        nodesWithLocation={nodesWithLocation}
        apiBaseUrl={apiBaseUrl}
        osrmApiUrl={osrmApiUrl}
        odps={odps}
    />
</Layout>
