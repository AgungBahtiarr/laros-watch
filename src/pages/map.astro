---
import Layout from "@/layouts/Layout.astro";
import MapPage from "@/components/MapPage.svelte";
import type { Node, Connection, Waypoint } from "@/types";

const apiBaseUrl = import.meta.env.PUBLIC_API_BASE_URL;
const osrmApiUrl = import.meta.env.PUBLIC_OSRM_API_URL;
const graphhopperApiUrl = import.meta.env.PUBLIC_GRAPHHOPPER_URL;

// Fetch nodes and connections
const token = Astro.cookies.get("authToken");

const [nodesResponse, connectionsResponse, waypointsResponse] = await Promise.all([
    fetch(`${apiBaseUrl}/api/nodes`, {
        headers: {
            Authorization: `Basic ${token?.value}`,
        },
    }),
    fetch(`${apiBaseUrl}/api/nodes/connections`, {
        headers: {
            Authorization: `Basic ${token?.value}`,
        },
    }),
    fetch(`${apiBaseUrl}/api/nodes/waypoints`, {
        headers: {
            Authorization: `Basic ${token?.value}`,
        },
    }),
]);

const nodes: Node[] = await nodesResponse.json();
const connections: Connection[] = await connectionsResponse.json();
const waypoints: Waypoint[] = await waypointsResponse.json();

const nodesWithLocation = nodes.filter((node) => node.lat && node.lng);

// Group connections by device and port pair, and select the one with Waypoint path if available
const connectionGroups = new Map<string, Connection[]>();
connections.forEach((conn) => {
    const pair1 = `${conn.deviceAId}:${conn.portAId}`;
    const pair2 = `${conn.deviceBId}:${conn.portBId}`;
    const pairKey = [pair1, pair2].sort().join("-");
    if (!connectionGroups.has(pairKey)) {
        connectionGroups.set(pairKey, []);
    }
    connectionGroups.get(pairKey)!.push(conn);
});

const uniqueConnections: Connection[] = [];
for (const group of connectionGroups.values()) {
    const withWaypoint = group.find(
        (c) => c.waypointPath && Array.isArray(c.waypointPath) && c.waypointPath.length > 0,
    );
    if (withWaypoint) {
        uniqueConnections.push(withWaypoint);
    } else if (group.length > 0) {
        uniqueConnections.push(group[0]);
    }
}
---

<Layout title="Nodes Map">
    <MapPage
        client:only="svelte"
        nodes={nodes}
        connections={uniqueConnections}
        nodesWithLocation={nodesWithLocation}
        apiBaseUrl={apiBaseUrl}
        osrmApiUrl={osrmApiUrl}
        graphhopperApiUrl={graphhopperApiUrl}
        waypoints={waypoints}
        token={token?.value}
    />
</Layout>
