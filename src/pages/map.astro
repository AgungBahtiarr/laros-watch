---
import Layout from "../layouts/Layout.astro";
import MapPage from "../components/MapPage.svelte";
import type { Node, Connection, Odp } from "../types";

const apiBaseUrl =
    import.meta.env.PUBLIC_API_BASE_URL || "http://localhost:3000";
const osrmApiUrl = import.meta.env.PUBLIC_OSRM_API_URL;

// Fetch nodes and connections
const [nodesResponse, connectionsResponse, odpsResponse] = await Promise.all([
    fetch(`${apiBaseUrl}/api/nodes`),
    fetch(`${apiBaseUrl}/api/nodes/connections`),
    fetch(`${apiBaseUrl}/api/nodes/odp`),
]);

const nodes: Node[] = await nodesResponse.json();
const connections: Connection[] = await connectionsResponse.json();
const odps: Odp[] = await odpsResponse.json();

const nodesWithLocation = nodes.filter((node) => node.lat && node.lng);
const nodeMap = new Map(nodes.map((node) => [node.id, node]));

// Prepare route promises
const routePromises = connections.map((conn) => {
    const nodeA = nodeMap.get(conn.deviceAId);
    const nodeB = nodeMap.get(conn.deviceBId);

    if (nodeA && nodeB && osrmApiUrl) {
        const url = `${osrmApiUrl}/${nodeA.lng},${nodeA.lat};${nodeB.lng},${nodeB.lat}?overview=full&geometries=geojson`;
        return fetch(url)
            .then((res) => res.json())
            .catch((error) => {
                console.error("OSRM API Fetch Error for URL:", url, error);
                return null;
            });
    }
    return Promise.resolve(null);
});

const routeResults = await Promise.all(routePromises);

const routes = routeResults
    .map((result, index) => {
        if (result && result.routes && result.routes.length > 0) {
            return {
                geometry: result.routes[0].geometry,
                distance: result.routes[0].distance, // in meters
                connectionId: connections[index].id,
            };
        }
        return null;
    })
    .filter(Boolean);
---

<Layout title="Nodes Map">
    <MapPage
        client:only="svelte"
        nodes={nodes}
        connections={connections}
        nodesWithLocation={nodesWithLocation}
        routes={routes}
        apiBaseUrl={apiBaseUrl}
        odps={odps}
    />
</Layout>
